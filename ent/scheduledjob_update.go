// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/connection"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/scheduledjob"
)

// ScheduledJobUpdate is the builder for updating ScheduledJob entities.
type ScheduledJobUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduledJobMutation
}

// Where appends a list predicates to the ScheduledJobUpdate builder.
func (sju *ScheduledJobUpdate) Where(ps ...predicate.ScheduledJob) *ScheduledJobUpdate {
	sju.mutation.Where(ps...)
	return sju
}

// SetStatus sets the "status" field.
func (sju *ScheduledJobUpdate) SetStatus(s string) *ScheduledJobUpdate {
	sju.mutation.SetStatus(s)
	return sju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableStatus(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetStatus(*s)
	}
	return sju
}

// SetUpdatedAt sets the "updated_at" field.
func (sju *ScheduledJobUpdate) SetUpdatedAt(t time.Time) *ScheduledJobUpdate {
	sju.mutation.SetUpdatedAt(t)
	return sju
}

// SetUpdatedBy sets the "updated_by" field.
func (sju *ScheduledJobUpdate) SetUpdatedBy(s string) *ScheduledJobUpdate {
	sju.mutation.SetUpdatedBy(s)
	return sju
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableUpdatedBy(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetUpdatedBy(*s)
	}
	return sju
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sju *ScheduledJobUpdate) ClearUpdatedBy() *ScheduledJobUpdate {
	sju.mutation.ClearUpdatedBy()
	return sju
}

// SetConnectionID sets the "connection_id" field.
func (sju *ScheduledJobUpdate) SetConnectionID(s string) *ScheduledJobUpdate {
	sju.mutation.SetConnectionID(s)
	return sju
}

// SetNillableConnectionID sets the "connection_id" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableConnectionID(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetConnectionID(*s)
	}
	return sju
}

// SetEntityType sets the "entity_type" field.
func (sju *ScheduledJobUpdate) SetEntityType(s string) *ScheduledJobUpdate {
	sju.mutation.SetEntityType(s)
	return sju
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableEntityType(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetEntityType(*s)
	}
	return sju
}

// SetInterval sets the "interval" field.
func (sju *ScheduledJobUpdate) SetInterval(s string) *ScheduledJobUpdate {
	sju.mutation.SetInterval(s)
	return sju
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableInterval(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetInterval(*s)
	}
	return sju
}

// SetEnabled sets the "enabled" field.
func (sju *ScheduledJobUpdate) SetEnabled(b bool) *ScheduledJobUpdate {
	sju.mutation.SetEnabled(b)
	return sju
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableEnabled(b *bool) *ScheduledJobUpdate {
	if b != nil {
		sju.SetEnabled(*b)
	}
	return sju
}

// SetJobConfig sets the "job_config" field.
func (sju *ScheduledJobUpdate) SetJobConfig(m map[string]interface{}) *ScheduledJobUpdate {
	sju.mutation.SetJobConfig(m)
	return sju
}

// ClearJobConfig clears the value of the "job_config" field.
func (sju *ScheduledJobUpdate) ClearJobConfig() *ScheduledJobUpdate {
	sju.mutation.ClearJobConfig()
	return sju
}

// SetLastRunAt sets the "last_run_at" field.
func (sju *ScheduledJobUpdate) SetLastRunAt(t time.Time) *ScheduledJobUpdate {
	sju.mutation.SetLastRunAt(t)
	return sju
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableLastRunAt(t *time.Time) *ScheduledJobUpdate {
	if t != nil {
		sju.SetLastRunAt(*t)
	}
	return sju
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (sju *ScheduledJobUpdate) ClearLastRunAt() *ScheduledJobUpdate {
	sju.mutation.ClearLastRunAt()
	return sju
}

// SetNextRunAt sets the "next_run_at" field.
func (sju *ScheduledJobUpdate) SetNextRunAt(t time.Time) *ScheduledJobUpdate {
	sju.mutation.SetNextRunAt(t)
	return sju
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableNextRunAt(t *time.Time) *ScheduledJobUpdate {
	if t != nil {
		sju.SetNextRunAt(*t)
	}
	return sju
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (sju *ScheduledJobUpdate) ClearNextRunAt() *ScheduledJobUpdate {
	sju.mutation.ClearNextRunAt()
	return sju
}

// SetLastRunStatus sets the "last_run_status" field.
func (sju *ScheduledJobUpdate) SetLastRunStatus(s string) *ScheduledJobUpdate {
	sju.mutation.SetLastRunStatus(s)
	return sju
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableLastRunStatus(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetLastRunStatus(*s)
	}
	return sju
}

// ClearLastRunStatus clears the value of the "last_run_status" field.
func (sju *ScheduledJobUpdate) ClearLastRunStatus() *ScheduledJobUpdate {
	sju.mutation.ClearLastRunStatus()
	return sju
}

// SetLastRunError sets the "last_run_error" field.
func (sju *ScheduledJobUpdate) SetLastRunError(s string) *ScheduledJobUpdate {
	sju.mutation.SetLastRunError(s)
	return sju
}

// SetNillableLastRunError sets the "last_run_error" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableLastRunError(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetLastRunError(*s)
	}
	return sju
}

// ClearLastRunError clears the value of the "last_run_error" field.
func (sju *ScheduledJobUpdate) ClearLastRunError() *ScheduledJobUpdate {
	sju.mutation.ClearLastRunError()
	return sju
}

// SetConnection sets the "connection" edge to the Connection entity.
func (sju *ScheduledJobUpdate) SetConnection(c *Connection) *ScheduledJobUpdate {
	return sju.SetConnectionID(c.ID)
}

// Mutation returns the ScheduledJobMutation object of the builder.
func (sju *ScheduledJobUpdate) Mutation() *ScheduledJobMutation {
	return sju.mutation
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (sju *ScheduledJobUpdate) ClearConnection() *ScheduledJobUpdate {
	sju.mutation.ClearConnection()
	return sju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sju *ScheduledJobUpdate) Save(ctx context.Context) (int, error) {
	sju.defaults()
	return withHooks(ctx, sju.sqlSave, sju.mutation, sju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sju *ScheduledJobUpdate) SaveX(ctx context.Context) int {
	affected, err := sju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sju *ScheduledJobUpdate) Exec(ctx context.Context) error {
	_, err := sju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sju *ScheduledJobUpdate) ExecX(ctx context.Context) {
	if err := sju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sju *ScheduledJobUpdate) defaults() {
	if _, ok := sju.mutation.UpdatedAt(); !ok {
		v := scheduledjob.UpdateDefaultUpdatedAt()
		sju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sju *ScheduledJobUpdate) check() error {
	if v, ok := sju.mutation.ConnectionID(); ok {
		if err := scheduledjob.ConnectionIDValidator(v); err != nil {
			return &ValidationError{Name: "connection_id", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.connection_id": %w`, err)}
		}
	}
	if v, ok := sju.mutation.EntityType(); ok {
		if err := scheduledjob.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.entity_type": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Interval(); ok {
		if err := scheduledjob.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.interval": %w`, err)}
		}
	}
	if sju.mutation.ConnectionCleared() && len(sju.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheduledJob.connection"`)
	}
	return nil
}

func (sju *ScheduledJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledjob.Table, scheduledjob.Columns, sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString))
	if ps := sju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sju.mutation.Status(); ok {
		_spec.SetField(scheduledjob.FieldStatus, field.TypeString, value)
	}
	if value, ok := sju.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if sju.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjob.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sju.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedBy, field.TypeString, value)
	}
	if sju.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjob.FieldUpdatedBy, field.TypeString)
	}
	if sju.mutation.EnvironmentIDCleared() {
		_spec.ClearField(scheduledjob.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sju.mutation.EntityType(); ok {
		_spec.SetField(scheduledjob.FieldEntityType, field.TypeString, value)
	}
	if value, ok := sju.mutation.Interval(); ok {
		_spec.SetField(scheduledjob.FieldInterval, field.TypeString, value)
	}
	if value, ok := sju.mutation.Enabled(); ok {
		_spec.SetField(scheduledjob.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := sju.mutation.JobConfig(); ok {
		_spec.SetField(scheduledjob.FieldJobConfig, field.TypeJSON, value)
	}
	if sju.mutation.JobConfigCleared() {
		_spec.ClearField(scheduledjob.FieldJobConfig, field.TypeJSON)
	}
	if value, ok := sju.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledjob.FieldLastRunAt, field.TypeTime, value)
	}
	if sju.mutation.LastRunAtCleared() {
		_spec.ClearField(scheduledjob.FieldLastRunAt, field.TypeTime)
	}
	if value, ok := sju.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledjob.FieldNextRunAt, field.TypeTime, value)
	}
	if sju.mutation.NextRunAtCleared() {
		_spec.ClearField(scheduledjob.FieldNextRunAt, field.TypeTime)
	}
	if value, ok := sju.mutation.LastRunStatus(); ok {
		_spec.SetField(scheduledjob.FieldLastRunStatus, field.TypeString, value)
	}
	if sju.mutation.LastRunStatusCleared() {
		_spec.ClearField(scheduledjob.FieldLastRunStatus, field.TypeString)
	}
	if value, ok := sju.mutation.LastRunError(); ok {
		_spec.SetField(scheduledjob.FieldLastRunError, field.TypeString, value)
	}
	if sju.mutation.LastRunErrorCleared() {
		_spec.ClearField(scheduledjob.FieldLastRunError, field.TypeString)
	}
	if sju.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.ConnectionTable,
			Columns: []string{scheduledjob.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.ConnectionTable,
			Columns: []string{scheduledjob.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sju.mutation.done = true
	return n, nil
}

// ScheduledJobUpdateOne is the builder for updating a single ScheduledJob entity.
type ScheduledJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduledJobMutation
}

// SetStatus sets the "status" field.
func (sjuo *ScheduledJobUpdateOne) SetStatus(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetStatus(s)
	return sjuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableStatus(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetStatus(*s)
	}
	return sjuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sjuo *ScheduledJobUpdateOne) SetUpdatedAt(t time.Time) *ScheduledJobUpdateOne {
	sjuo.mutation.SetUpdatedAt(t)
	return sjuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sjuo *ScheduledJobUpdateOne) SetUpdatedBy(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetUpdatedBy(s)
	return sjuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableUpdatedBy(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetUpdatedBy(*s)
	}
	return sjuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sjuo *ScheduledJobUpdateOne) ClearUpdatedBy() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearUpdatedBy()
	return sjuo
}

// SetConnectionID sets the "connection_id" field.
func (sjuo *ScheduledJobUpdateOne) SetConnectionID(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetConnectionID(s)
	return sjuo
}

// SetNillableConnectionID sets the "connection_id" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableConnectionID(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetConnectionID(*s)
	}
	return sjuo
}

// SetEntityType sets the "entity_type" field.
func (sjuo *ScheduledJobUpdateOne) SetEntityType(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetEntityType(s)
	return sjuo
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableEntityType(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetEntityType(*s)
	}
	return sjuo
}

// SetInterval sets the "interval" field.
func (sjuo *ScheduledJobUpdateOne) SetInterval(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetInterval(s)
	return sjuo
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableInterval(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetInterval(*s)
	}
	return sjuo
}

// SetEnabled sets the "enabled" field.
func (sjuo *ScheduledJobUpdateOne) SetEnabled(b bool) *ScheduledJobUpdateOne {
	sjuo.mutation.SetEnabled(b)
	return sjuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableEnabled(b *bool) *ScheduledJobUpdateOne {
	if b != nil {
		sjuo.SetEnabled(*b)
	}
	return sjuo
}

// SetJobConfig sets the "job_config" field.
func (sjuo *ScheduledJobUpdateOne) SetJobConfig(m map[string]interface{}) *ScheduledJobUpdateOne {
	sjuo.mutation.SetJobConfig(m)
	return sjuo
}

// ClearJobConfig clears the value of the "job_config" field.
func (sjuo *ScheduledJobUpdateOne) ClearJobConfig() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearJobConfig()
	return sjuo
}

// SetLastRunAt sets the "last_run_at" field.
func (sjuo *ScheduledJobUpdateOne) SetLastRunAt(t time.Time) *ScheduledJobUpdateOne {
	sjuo.mutation.SetLastRunAt(t)
	return sjuo
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableLastRunAt(t *time.Time) *ScheduledJobUpdateOne {
	if t != nil {
		sjuo.SetLastRunAt(*t)
	}
	return sjuo
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (sjuo *ScheduledJobUpdateOne) ClearLastRunAt() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearLastRunAt()
	return sjuo
}

// SetNextRunAt sets the "next_run_at" field.
func (sjuo *ScheduledJobUpdateOne) SetNextRunAt(t time.Time) *ScheduledJobUpdateOne {
	sjuo.mutation.SetNextRunAt(t)
	return sjuo
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableNextRunAt(t *time.Time) *ScheduledJobUpdateOne {
	if t != nil {
		sjuo.SetNextRunAt(*t)
	}
	return sjuo
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (sjuo *ScheduledJobUpdateOne) ClearNextRunAt() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearNextRunAt()
	return sjuo
}

// SetLastRunStatus sets the "last_run_status" field.
func (sjuo *ScheduledJobUpdateOne) SetLastRunStatus(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetLastRunStatus(s)
	return sjuo
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableLastRunStatus(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetLastRunStatus(*s)
	}
	return sjuo
}

// ClearLastRunStatus clears the value of the "last_run_status" field.
func (sjuo *ScheduledJobUpdateOne) ClearLastRunStatus() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearLastRunStatus()
	return sjuo
}

// SetLastRunError sets the "last_run_error" field.
func (sjuo *ScheduledJobUpdateOne) SetLastRunError(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetLastRunError(s)
	return sjuo
}

// SetNillableLastRunError sets the "last_run_error" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableLastRunError(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetLastRunError(*s)
	}
	return sjuo
}

// ClearLastRunError clears the value of the "last_run_error" field.
func (sjuo *ScheduledJobUpdateOne) ClearLastRunError() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearLastRunError()
	return sjuo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (sjuo *ScheduledJobUpdateOne) SetConnection(c *Connection) *ScheduledJobUpdateOne {
	return sjuo.SetConnectionID(c.ID)
}

// Mutation returns the ScheduledJobMutation object of the builder.
func (sjuo *ScheduledJobUpdateOne) Mutation() *ScheduledJobMutation {
	return sjuo.mutation
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (sjuo *ScheduledJobUpdateOne) ClearConnection() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearConnection()
	return sjuo
}

// Where appends a list predicates to the ScheduledJobUpdate builder.
func (sjuo *ScheduledJobUpdateOne) Where(ps ...predicate.ScheduledJob) *ScheduledJobUpdateOne {
	sjuo.mutation.Where(ps...)
	return sjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjuo *ScheduledJobUpdateOne) Select(field string, fields ...string) *ScheduledJobUpdateOne {
	sjuo.fields = append([]string{field}, fields...)
	return sjuo
}

// Save executes the query and returns the updated ScheduledJob entity.
func (sjuo *ScheduledJobUpdateOne) Save(ctx context.Context) (*ScheduledJob, error) {
	sjuo.defaults()
	return withHooks(ctx, sjuo.sqlSave, sjuo.mutation, sjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjuo *ScheduledJobUpdateOne) SaveX(ctx context.Context) *ScheduledJob {
	node, err := sjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjuo *ScheduledJobUpdateOne) Exec(ctx context.Context) error {
	_, err := sjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjuo *ScheduledJobUpdateOne) ExecX(ctx context.Context) {
	if err := sjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjuo *ScheduledJobUpdateOne) defaults() {
	if _, ok := sjuo.mutation.UpdatedAt(); !ok {
		v := scheduledjob.UpdateDefaultUpdatedAt()
		sjuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjuo *ScheduledJobUpdateOne) check() error {
	if v, ok := sjuo.mutation.ConnectionID(); ok {
		if err := scheduledjob.ConnectionIDValidator(v); err != nil {
			return &ValidationError{Name: "connection_id", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.connection_id": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.EntityType(); ok {
		if err := scheduledjob.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.entity_type": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Interval(); ok {
		if err := scheduledjob.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.interval": %w`, err)}
		}
	}
	if sjuo.mutation.ConnectionCleared() && len(sjuo.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheduledJob.connection"`)
	}
	return nil
}

func (sjuo *ScheduledJobUpdateOne) sqlSave(ctx context.Context) (_node *ScheduledJob, err error) {
	if err := sjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledjob.Table, scheduledjob.Columns, sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString))
	id, ok := sjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheduledJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledjob.FieldID)
		for _, f := range fields {
			if !scheduledjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scheduledjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sjuo.mutation.Status(); ok {
		_spec.SetField(scheduledjob.FieldStatus, field.TypeString, value)
	}
	if value, ok := sjuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if sjuo.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjob.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sjuo.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedBy, field.TypeString, value)
	}
	if sjuo.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjob.FieldUpdatedBy, field.TypeString)
	}
	if sjuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(scheduledjob.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := sjuo.mutation.EntityType(); ok {
		_spec.SetField(scheduledjob.FieldEntityType, field.TypeString, value)
	}
	if value, ok := sjuo.mutation.Interval(); ok {
		_spec.SetField(scheduledjob.FieldInterval, field.TypeString, value)
	}
	if value, ok := sjuo.mutation.Enabled(); ok {
		_spec.SetField(scheduledjob.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := sjuo.mutation.JobConfig(); ok {
		_spec.SetField(scheduledjob.FieldJobConfig, field.TypeJSON, value)
	}
	if sjuo.mutation.JobConfigCleared() {
		_spec.ClearField(scheduledjob.FieldJobConfig, field.TypeJSON)
	}
	if value, ok := sjuo.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledjob.FieldLastRunAt, field.TypeTime, value)
	}
	if sjuo.mutation.LastRunAtCleared() {
		_spec.ClearField(scheduledjob.FieldLastRunAt, field.TypeTime)
	}
	if value, ok := sjuo.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledjob.FieldNextRunAt, field.TypeTime, value)
	}
	if sjuo.mutation.NextRunAtCleared() {
		_spec.ClearField(scheduledjob.FieldNextRunAt, field.TypeTime)
	}
	if value, ok := sjuo.mutation.LastRunStatus(); ok {
		_spec.SetField(scheduledjob.FieldLastRunStatus, field.TypeString, value)
	}
	if sjuo.mutation.LastRunStatusCleared() {
		_spec.ClearField(scheduledjob.FieldLastRunStatus, field.TypeString)
	}
	if value, ok := sjuo.mutation.LastRunError(); ok {
		_spec.SetField(scheduledjob.FieldLastRunError, field.TypeString, value)
	}
	if sjuo.mutation.LastRunErrorCleared() {
		_spec.ClearField(scheduledjob.FieldLastRunError, field.TypeString)
	}
	if sjuo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.ConnectionTable,
			Columns: []string{scheduledjob.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.ConnectionTable,
			Columns: []string{scheduledjob.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheduledJob{config: sjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sjuo.mutation.done = true
	return _node, nil
}
