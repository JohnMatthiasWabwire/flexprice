// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/connection"
	"github.com/flexprice/flexprice/ent/scheduledjob"
)

// ScheduledJob is the model entity for the ScheduledJob schema.
type ScheduledJob struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// Reference to the connection (S3, etc.) to use for export
	ConnectionID string `json:"connection_id,omitempty"`
	// Entity type to export (feature_usage, customer, invoice, etc.)
	EntityType string `json:"entity_type,omitempty"`
	// Schedule interval (hourly, daily, weekly, monthly)
	Interval string `json:"interval,omitempty"`
	// Whether this scheduled job is active
	Enabled bool `json:"enabled,omitempty"`
	// Job-specific configuration (bucket, region, key_prefix, compression, etc.)
	JobConfig map[string]interface{} `json:"job_config,omitempty"`
	// Timestamp of the last successful run
	LastRunAt *time.Time `json:"last_run_at,omitempty"`
	// Timestamp for the next scheduled run
	NextRunAt *time.Time `json:"next_run_at,omitempty"`
	// Status of the last run (success, failed, running)
	LastRunStatus string `json:"last_run_status,omitempty"`
	// Error message from last run if failed
	LastRunError string `json:"last_run_error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduledJobQuery when eager-loading is set.
	Edges        ScheduledJobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheduledJobEdges holds the relations/edges for other nodes in the graph.
type ScheduledJobEdges struct {
	// Connection holds the value of the connection edge.
	Connection *Connection `json:"connection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobEdges) ConnectionOrErr() (*Connection, error) {
	if e.Connection != nil {
		return e.Connection, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: connection.Label}
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduledJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduledjob.FieldJobConfig:
			values[i] = new([]byte)
		case scheduledjob.FieldEnabled:
			values[i] = new(sql.NullBool)
		case scheduledjob.FieldID, scheduledjob.FieldTenantID, scheduledjob.FieldStatus, scheduledjob.FieldCreatedBy, scheduledjob.FieldUpdatedBy, scheduledjob.FieldEnvironmentID, scheduledjob.FieldConnectionID, scheduledjob.FieldEntityType, scheduledjob.FieldInterval, scheduledjob.FieldLastRunStatus, scheduledjob.FieldLastRunError:
			values[i] = new(sql.NullString)
		case scheduledjob.FieldCreatedAt, scheduledjob.FieldUpdatedAt, scheduledjob.FieldLastRunAt, scheduledjob.FieldNextRunAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduledJob fields.
func (sj *ScheduledJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduledjob.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sj.ID = value.String
			}
		case scheduledjob.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sj.TenantID = value.String
			}
		case scheduledjob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sj.Status = value.String
			}
		case scheduledjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sj.CreatedAt = value.Time
			}
		case scheduledjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sj.UpdatedAt = value.Time
			}
		case scheduledjob.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sj.CreatedBy = value.String
			}
		case scheduledjob.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sj.UpdatedBy = value.String
			}
		case scheduledjob.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				sj.EnvironmentID = value.String
			}
		case scheduledjob.FieldConnectionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connection_id", values[i])
			} else if value.Valid {
				sj.ConnectionID = value.String
			}
		case scheduledjob.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				sj.EntityType = value.String
			}
		case scheduledjob.FieldInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				sj.Interval = value.String
			}
		case scheduledjob.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				sj.Enabled = value.Bool
			}
		case scheduledjob.FieldJobConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field job_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sj.JobConfig); err != nil {
					return fmt.Errorf("unmarshal field job_config: %w", err)
				}
			}
		case scheduledjob.FieldLastRunAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_run_at", values[i])
			} else if value.Valid {
				sj.LastRunAt = new(time.Time)
				*sj.LastRunAt = value.Time
			}
		case scheduledjob.FieldNextRunAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_run_at", values[i])
			} else if value.Valid {
				sj.NextRunAt = new(time.Time)
				*sj.NextRunAt = value.Time
			}
		case scheduledjob.FieldLastRunStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_run_status", values[i])
			} else if value.Valid {
				sj.LastRunStatus = value.String
			}
		case scheduledjob.FieldLastRunError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_run_error", values[i])
			} else if value.Valid {
				sj.LastRunError = value.String
			}
		default:
			sj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduledJob.
// This includes values selected through modifiers, order, etc.
func (sj *ScheduledJob) Value(name string) (ent.Value, error) {
	return sj.selectValues.Get(name)
}

// QueryConnection queries the "connection" edge of the ScheduledJob entity.
func (sj *ScheduledJob) QueryConnection() *ConnectionQuery {
	return NewScheduledJobClient(sj.config).QueryConnection(sj)
}

// Update returns a builder for updating this ScheduledJob.
// Note that you need to call ScheduledJob.Unwrap() before calling this method if this ScheduledJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (sj *ScheduledJob) Update() *ScheduledJobUpdateOne {
	return NewScheduledJobClient(sj.config).UpdateOne(sj)
}

// Unwrap unwraps the ScheduledJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sj *ScheduledJob) Unwrap() *ScheduledJob {
	_tx, ok := sj.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheduledJob is not a transactional entity")
	}
	sj.config.driver = _tx.drv
	return sj
}

// String implements the fmt.Stringer.
func (sj *ScheduledJob) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduledJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sj.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(sj.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sj.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sj.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sj.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sj.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sj.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(sj.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("connection_id=")
	builder.WriteString(sj.ConnectionID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(sj.EntityType)
	builder.WriteString(", ")
	builder.WriteString("interval=")
	builder.WriteString(sj.Interval)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", sj.Enabled))
	builder.WriteString(", ")
	builder.WriteString("job_config=")
	builder.WriteString(fmt.Sprintf("%v", sj.JobConfig))
	builder.WriteString(", ")
	if v := sj.LastRunAt; v != nil {
		builder.WriteString("last_run_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sj.NextRunAt; v != nil {
		builder.WriteString("next_run_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("last_run_status=")
	builder.WriteString(sj.LastRunStatus)
	builder.WriteString(", ")
	builder.WriteString("last_run_error=")
	builder.WriteString(sj.LastRunError)
	builder.WriteByte(')')
	return builder.String()
}

// ScheduledJobs is a parsable slice of ScheduledJob.
type ScheduledJobs []*ScheduledJob
