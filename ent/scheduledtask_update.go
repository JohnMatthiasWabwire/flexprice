// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/predicate"
	"github.com/flexprice/flexprice/ent/scheduledtask"
)

// ScheduledTaskUpdate is the builder for updating ScheduledTask entities.
type ScheduledTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduledTaskMutation
}

// Where appends a list predicates to the ScheduledTaskUpdate builder.
func (stu *ScheduledTaskUpdate) Where(ps ...predicate.ScheduledTask) *ScheduledTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetStatus sets the "status" field.
func (stu *ScheduledTaskUpdate) SetStatus(s string) *ScheduledTaskUpdate {
	stu.mutation.SetStatus(s)
	return stu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableStatus(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetStatus(*s)
	}
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *ScheduledTaskUpdate) SetUpdatedAt(t time.Time) *ScheduledTaskUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetUpdatedBy sets the "updated_by" field.
func (stu *ScheduledTaskUpdate) SetUpdatedBy(s string) *ScheduledTaskUpdate {
	stu.mutation.SetUpdatedBy(s)
	return stu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableUpdatedBy(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetUpdatedBy(*s)
	}
	return stu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (stu *ScheduledTaskUpdate) ClearUpdatedBy() *ScheduledTaskUpdate {
	stu.mutation.ClearUpdatedBy()
	return stu
}

// SetConnectionID sets the "connection_id" field.
func (stu *ScheduledTaskUpdate) SetConnectionID(s string) *ScheduledTaskUpdate {
	stu.mutation.SetConnectionID(s)
	return stu
}

// SetNillableConnectionID sets the "connection_id" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableConnectionID(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetConnectionID(*s)
	}
	return stu
}

// SetEntityType sets the "entity_type" field.
func (stu *ScheduledTaskUpdate) SetEntityType(s string) *ScheduledTaskUpdate {
	stu.mutation.SetEntityType(s)
	return stu
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableEntityType(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetEntityType(*s)
	}
	return stu
}

// SetInterval sets the "interval" field.
func (stu *ScheduledTaskUpdate) SetInterval(s string) *ScheduledTaskUpdate {
	stu.mutation.SetInterval(s)
	return stu
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableInterval(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetInterval(*s)
	}
	return stu
}

// SetEnabled sets the "enabled" field.
func (stu *ScheduledTaskUpdate) SetEnabled(b bool) *ScheduledTaskUpdate {
	stu.mutation.SetEnabled(b)
	return stu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableEnabled(b *bool) *ScheduledTaskUpdate {
	if b != nil {
		stu.SetEnabled(*b)
	}
	return stu
}

// SetJobConfig sets the "job_config" field.
func (stu *ScheduledTaskUpdate) SetJobConfig(m map[string]interface{}) *ScheduledTaskUpdate {
	stu.mutation.SetJobConfig(m)
	return stu
}

// ClearJobConfig clears the value of the "job_config" field.
func (stu *ScheduledTaskUpdate) ClearJobConfig() *ScheduledTaskUpdate {
	stu.mutation.ClearJobConfig()
	return stu
}

// SetLastRunAt sets the "last_run_at" field.
func (stu *ScheduledTaskUpdate) SetLastRunAt(t time.Time) *ScheduledTaskUpdate {
	stu.mutation.SetLastRunAt(t)
	return stu
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableLastRunAt(t *time.Time) *ScheduledTaskUpdate {
	if t != nil {
		stu.SetLastRunAt(*t)
	}
	return stu
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (stu *ScheduledTaskUpdate) ClearLastRunAt() *ScheduledTaskUpdate {
	stu.mutation.ClearLastRunAt()
	return stu
}

// SetNextRunAt sets the "next_run_at" field.
func (stu *ScheduledTaskUpdate) SetNextRunAt(t time.Time) *ScheduledTaskUpdate {
	stu.mutation.SetNextRunAt(t)
	return stu
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableNextRunAt(t *time.Time) *ScheduledTaskUpdate {
	if t != nil {
		stu.SetNextRunAt(*t)
	}
	return stu
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (stu *ScheduledTaskUpdate) ClearNextRunAt() *ScheduledTaskUpdate {
	stu.mutation.ClearNextRunAt()
	return stu
}

// SetLastRunStatus sets the "last_run_status" field.
func (stu *ScheduledTaskUpdate) SetLastRunStatus(s string) *ScheduledTaskUpdate {
	stu.mutation.SetLastRunStatus(s)
	return stu
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableLastRunStatus(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetLastRunStatus(*s)
	}
	return stu
}

// ClearLastRunStatus clears the value of the "last_run_status" field.
func (stu *ScheduledTaskUpdate) ClearLastRunStatus() *ScheduledTaskUpdate {
	stu.mutation.ClearLastRunStatus()
	return stu
}

// SetLastRunError sets the "last_run_error" field.
func (stu *ScheduledTaskUpdate) SetLastRunError(s string) *ScheduledTaskUpdate {
	stu.mutation.SetLastRunError(s)
	return stu
}

// SetNillableLastRunError sets the "last_run_error" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableLastRunError(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetLastRunError(*s)
	}
	return stu
}

// ClearLastRunError clears the value of the "last_run_error" field.
func (stu *ScheduledTaskUpdate) ClearLastRunError() *ScheduledTaskUpdate {
	stu.mutation.ClearLastRunError()
	return stu
}

// SetTemporalScheduleID sets the "temporal_schedule_id" field.
func (stu *ScheduledTaskUpdate) SetTemporalScheduleID(s string) *ScheduledTaskUpdate {
	stu.mutation.SetTemporalScheduleID(s)
	return stu
}

// SetNillableTemporalScheduleID sets the "temporal_schedule_id" field if the given value is not nil.
func (stu *ScheduledTaskUpdate) SetNillableTemporalScheduleID(s *string) *ScheduledTaskUpdate {
	if s != nil {
		stu.SetTemporalScheduleID(*s)
	}
	return stu
}

// ClearTemporalScheduleID clears the value of the "temporal_schedule_id" field.
func (stu *ScheduledTaskUpdate) ClearTemporalScheduleID() *ScheduledTaskUpdate {
	stu.mutation.ClearTemporalScheduleID()
	return stu
}

// Mutation returns the ScheduledTaskMutation object of the builder.
func (stu *ScheduledTaskUpdate) Mutation() *ScheduledTaskMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ScheduledTaskUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ScheduledTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ScheduledTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ScheduledTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *ScheduledTaskUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := scheduledtask.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ScheduledTaskUpdate) check() error {
	if v, ok := stu.mutation.ConnectionID(); ok {
		if err := scheduledtask.ConnectionIDValidator(v); err != nil {
			return &ValidationError{Name: "connection_id", err: fmt.Errorf(`ent: validator failed for field "ScheduledTask.connection_id": %w`, err)}
		}
	}
	if v, ok := stu.mutation.EntityType(); ok {
		if err := scheduledtask.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "ScheduledTask.entity_type": %w`, err)}
		}
	}
	if v, ok := stu.mutation.Interval(); ok {
		if err := scheduledtask.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ScheduledTask.interval": %w`, err)}
		}
	}
	return nil
}

func (stu *ScheduledTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledtask.Table, scheduledtask.Columns, sqlgraph.NewFieldSpec(scheduledtask.FieldID, field.TypeString))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Status(); ok {
		_spec.SetField(scheduledtask.FieldStatus, field.TypeString, value)
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledtask.FieldUpdatedAt, field.TypeTime, value)
	}
	if stu.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledtask.FieldCreatedBy, field.TypeString)
	}
	if value, ok := stu.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledtask.FieldUpdatedBy, field.TypeString, value)
	}
	if stu.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledtask.FieldUpdatedBy, field.TypeString)
	}
	if stu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(scheduledtask.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := stu.mutation.ConnectionID(); ok {
		_spec.SetField(scheduledtask.FieldConnectionID, field.TypeString, value)
	}
	if value, ok := stu.mutation.EntityType(); ok {
		_spec.SetField(scheduledtask.FieldEntityType, field.TypeString, value)
	}
	if value, ok := stu.mutation.Interval(); ok {
		_spec.SetField(scheduledtask.FieldInterval, field.TypeString, value)
	}
	if value, ok := stu.mutation.Enabled(); ok {
		_spec.SetField(scheduledtask.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := stu.mutation.JobConfig(); ok {
		_spec.SetField(scheduledtask.FieldJobConfig, field.TypeJSON, value)
	}
	if stu.mutation.JobConfigCleared() {
		_spec.ClearField(scheduledtask.FieldJobConfig, field.TypeJSON)
	}
	if value, ok := stu.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledtask.FieldLastRunAt, field.TypeTime, value)
	}
	if stu.mutation.LastRunAtCleared() {
		_spec.ClearField(scheduledtask.FieldLastRunAt, field.TypeTime)
	}
	if value, ok := stu.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledtask.FieldNextRunAt, field.TypeTime, value)
	}
	if stu.mutation.NextRunAtCleared() {
		_spec.ClearField(scheduledtask.FieldNextRunAt, field.TypeTime)
	}
	if value, ok := stu.mutation.LastRunStatus(); ok {
		_spec.SetField(scheduledtask.FieldLastRunStatus, field.TypeString, value)
	}
	if stu.mutation.LastRunStatusCleared() {
		_spec.ClearField(scheduledtask.FieldLastRunStatus, field.TypeString)
	}
	if value, ok := stu.mutation.LastRunError(); ok {
		_spec.SetField(scheduledtask.FieldLastRunError, field.TypeString, value)
	}
	if stu.mutation.LastRunErrorCleared() {
		_spec.ClearField(scheduledtask.FieldLastRunError, field.TypeString)
	}
	if value, ok := stu.mutation.TemporalScheduleID(); ok {
		_spec.SetField(scheduledtask.FieldTemporalScheduleID, field.TypeString, value)
	}
	if stu.mutation.TemporalScheduleIDCleared() {
		_spec.ClearField(scheduledtask.FieldTemporalScheduleID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ScheduledTaskUpdateOne is the builder for updating a single ScheduledTask entity.
type ScheduledTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduledTaskMutation
}

// SetStatus sets the "status" field.
func (stuo *ScheduledTaskUpdateOne) SetStatus(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetStatus(s)
	return stuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableStatus(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetStatus(*s)
	}
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *ScheduledTaskUpdateOne) SetUpdatedAt(t time.Time) *ScheduledTaskUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetUpdatedBy sets the "updated_by" field.
func (stuo *ScheduledTaskUpdateOne) SetUpdatedBy(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetUpdatedBy(s)
	return stuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableUpdatedBy(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetUpdatedBy(*s)
	}
	return stuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (stuo *ScheduledTaskUpdateOne) ClearUpdatedBy() *ScheduledTaskUpdateOne {
	stuo.mutation.ClearUpdatedBy()
	return stuo
}

// SetConnectionID sets the "connection_id" field.
func (stuo *ScheduledTaskUpdateOne) SetConnectionID(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetConnectionID(s)
	return stuo
}

// SetNillableConnectionID sets the "connection_id" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableConnectionID(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetConnectionID(*s)
	}
	return stuo
}

// SetEntityType sets the "entity_type" field.
func (stuo *ScheduledTaskUpdateOne) SetEntityType(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetEntityType(s)
	return stuo
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableEntityType(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetEntityType(*s)
	}
	return stuo
}

// SetInterval sets the "interval" field.
func (stuo *ScheduledTaskUpdateOne) SetInterval(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetInterval(s)
	return stuo
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableInterval(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetInterval(*s)
	}
	return stuo
}

// SetEnabled sets the "enabled" field.
func (stuo *ScheduledTaskUpdateOne) SetEnabled(b bool) *ScheduledTaskUpdateOne {
	stuo.mutation.SetEnabled(b)
	return stuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableEnabled(b *bool) *ScheduledTaskUpdateOne {
	if b != nil {
		stuo.SetEnabled(*b)
	}
	return stuo
}

// SetJobConfig sets the "job_config" field.
func (stuo *ScheduledTaskUpdateOne) SetJobConfig(m map[string]interface{}) *ScheduledTaskUpdateOne {
	stuo.mutation.SetJobConfig(m)
	return stuo
}

// ClearJobConfig clears the value of the "job_config" field.
func (stuo *ScheduledTaskUpdateOne) ClearJobConfig() *ScheduledTaskUpdateOne {
	stuo.mutation.ClearJobConfig()
	return stuo
}

// SetLastRunAt sets the "last_run_at" field.
func (stuo *ScheduledTaskUpdateOne) SetLastRunAt(t time.Time) *ScheduledTaskUpdateOne {
	stuo.mutation.SetLastRunAt(t)
	return stuo
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableLastRunAt(t *time.Time) *ScheduledTaskUpdateOne {
	if t != nil {
		stuo.SetLastRunAt(*t)
	}
	return stuo
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (stuo *ScheduledTaskUpdateOne) ClearLastRunAt() *ScheduledTaskUpdateOne {
	stuo.mutation.ClearLastRunAt()
	return stuo
}

// SetNextRunAt sets the "next_run_at" field.
func (stuo *ScheduledTaskUpdateOne) SetNextRunAt(t time.Time) *ScheduledTaskUpdateOne {
	stuo.mutation.SetNextRunAt(t)
	return stuo
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableNextRunAt(t *time.Time) *ScheduledTaskUpdateOne {
	if t != nil {
		stuo.SetNextRunAt(*t)
	}
	return stuo
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (stuo *ScheduledTaskUpdateOne) ClearNextRunAt() *ScheduledTaskUpdateOne {
	stuo.mutation.ClearNextRunAt()
	return stuo
}

// SetLastRunStatus sets the "last_run_status" field.
func (stuo *ScheduledTaskUpdateOne) SetLastRunStatus(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetLastRunStatus(s)
	return stuo
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableLastRunStatus(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetLastRunStatus(*s)
	}
	return stuo
}

// ClearLastRunStatus clears the value of the "last_run_status" field.
func (stuo *ScheduledTaskUpdateOne) ClearLastRunStatus() *ScheduledTaskUpdateOne {
	stuo.mutation.ClearLastRunStatus()
	return stuo
}

// SetLastRunError sets the "last_run_error" field.
func (stuo *ScheduledTaskUpdateOne) SetLastRunError(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetLastRunError(s)
	return stuo
}

// SetNillableLastRunError sets the "last_run_error" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableLastRunError(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetLastRunError(*s)
	}
	return stuo
}

// ClearLastRunError clears the value of the "last_run_error" field.
func (stuo *ScheduledTaskUpdateOne) ClearLastRunError() *ScheduledTaskUpdateOne {
	stuo.mutation.ClearLastRunError()
	return stuo
}

// SetTemporalScheduleID sets the "temporal_schedule_id" field.
func (stuo *ScheduledTaskUpdateOne) SetTemporalScheduleID(s string) *ScheduledTaskUpdateOne {
	stuo.mutation.SetTemporalScheduleID(s)
	return stuo
}

// SetNillableTemporalScheduleID sets the "temporal_schedule_id" field if the given value is not nil.
func (stuo *ScheduledTaskUpdateOne) SetNillableTemporalScheduleID(s *string) *ScheduledTaskUpdateOne {
	if s != nil {
		stuo.SetTemporalScheduleID(*s)
	}
	return stuo
}

// ClearTemporalScheduleID clears the value of the "temporal_schedule_id" field.
func (stuo *ScheduledTaskUpdateOne) ClearTemporalScheduleID() *ScheduledTaskUpdateOne {
	stuo.mutation.ClearTemporalScheduleID()
	return stuo
}

// Mutation returns the ScheduledTaskMutation object of the builder.
func (stuo *ScheduledTaskUpdateOne) Mutation() *ScheduledTaskMutation {
	return stuo.mutation
}

// Where appends a list predicates to the ScheduledTaskUpdate builder.
func (stuo *ScheduledTaskUpdateOne) Where(ps ...predicate.ScheduledTask) *ScheduledTaskUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ScheduledTaskUpdateOne) Select(field string, fields ...string) *ScheduledTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ScheduledTask entity.
func (stuo *ScheduledTaskUpdateOne) Save(ctx context.Context) (*ScheduledTask, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ScheduledTaskUpdateOne) SaveX(ctx context.Context) *ScheduledTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ScheduledTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ScheduledTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *ScheduledTaskUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := scheduledtask.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ScheduledTaskUpdateOne) check() error {
	if v, ok := stuo.mutation.ConnectionID(); ok {
		if err := scheduledtask.ConnectionIDValidator(v); err != nil {
			return &ValidationError{Name: "connection_id", err: fmt.Errorf(`ent: validator failed for field "ScheduledTask.connection_id": %w`, err)}
		}
	}
	if v, ok := stuo.mutation.EntityType(); ok {
		if err := scheduledtask.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "ScheduledTask.entity_type": %w`, err)}
		}
	}
	if v, ok := stuo.mutation.Interval(); ok {
		if err := scheduledtask.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ScheduledTask.interval": %w`, err)}
		}
	}
	return nil
}

func (stuo *ScheduledTaskUpdateOne) sqlSave(ctx context.Context) (_node *ScheduledTask, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledtask.Table, scheduledtask.Columns, sqlgraph.NewFieldSpec(scheduledtask.FieldID, field.TypeString))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheduledTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledtask.FieldID)
		for _, f := range fields {
			if !scheduledtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scheduledtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Status(); ok {
		_spec.SetField(scheduledtask.FieldStatus, field.TypeString, value)
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledtask.FieldUpdatedAt, field.TypeTime, value)
	}
	if stuo.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledtask.FieldCreatedBy, field.TypeString)
	}
	if value, ok := stuo.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledtask.FieldUpdatedBy, field.TypeString, value)
	}
	if stuo.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledtask.FieldUpdatedBy, field.TypeString)
	}
	if stuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(scheduledtask.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := stuo.mutation.ConnectionID(); ok {
		_spec.SetField(scheduledtask.FieldConnectionID, field.TypeString, value)
	}
	if value, ok := stuo.mutation.EntityType(); ok {
		_spec.SetField(scheduledtask.FieldEntityType, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Interval(); ok {
		_spec.SetField(scheduledtask.FieldInterval, field.TypeString, value)
	}
	if value, ok := stuo.mutation.Enabled(); ok {
		_spec.SetField(scheduledtask.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := stuo.mutation.JobConfig(); ok {
		_spec.SetField(scheduledtask.FieldJobConfig, field.TypeJSON, value)
	}
	if stuo.mutation.JobConfigCleared() {
		_spec.ClearField(scheduledtask.FieldJobConfig, field.TypeJSON)
	}
	if value, ok := stuo.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledtask.FieldLastRunAt, field.TypeTime, value)
	}
	if stuo.mutation.LastRunAtCleared() {
		_spec.ClearField(scheduledtask.FieldLastRunAt, field.TypeTime)
	}
	if value, ok := stuo.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledtask.FieldNextRunAt, field.TypeTime, value)
	}
	if stuo.mutation.NextRunAtCleared() {
		_spec.ClearField(scheduledtask.FieldNextRunAt, field.TypeTime)
	}
	if value, ok := stuo.mutation.LastRunStatus(); ok {
		_spec.SetField(scheduledtask.FieldLastRunStatus, field.TypeString, value)
	}
	if stuo.mutation.LastRunStatusCleared() {
		_spec.ClearField(scheduledtask.FieldLastRunStatus, field.TypeString)
	}
	if value, ok := stuo.mutation.LastRunError(); ok {
		_spec.SetField(scheduledtask.FieldLastRunError, field.TypeString, value)
	}
	if stuo.mutation.LastRunErrorCleared() {
		_spec.ClearField(scheduledtask.FieldLastRunError, field.TypeString)
	}
	if value, ok := stuo.mutation.TemporalScheduleID(); ok {
		_spec.SetField(scheduledtask.FieldTemporalScheduleID, field.TypeString, value)
	}
	if stuo.mutation.TemporalScheduleIDCleared() {
		_spec.ClearField(scheduledtask.FieldTemporalScheduleID, field.TypeString)
	}
	_node = &ScheduledTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
