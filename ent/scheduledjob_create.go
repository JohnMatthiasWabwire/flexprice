// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/connection"
	"github.com/flexprice/flexprice/ent/scheduledjob"
)

// ScheduledJobCreate is the builder for creating a ScheduledJob entity.
type ScheduledJobCreate struct {
	config
	mutation *ScheduledJobMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (sjc *ScheduledJobCreate) SetTenantID(s string) *ScheduledJobCreate {
	sjc.mutation.SetTenantID(s)
	return sjc
}

// SetStatus sets the "status" field.
func (sjc *ScheduledJobCreate) SetStatus(s string) *ScheduledJobCreate {
	sjc.mutation.SetStatus(s)
	return sjc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableStatus(s *string) *ScheduledJobCreate {
	if s != nil {
		sjc.SetStatus(*s)
	}
	return sjc
}

// SetCreatedAt sets the "created_at" field.
func (sjc *ScheduledJobCreate) SetCreatedAt(t time.Time) *ScheduledJobCreate {
	sjc.mutation.SetCreatedAt(t)
	return sjc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableCreatedAt(t *time.Time) *ScheduledJobCreate {
	if t != nil {
		sjc.SetCreatedAt(*t)
	}
	return sjc
}

// SetUpdatedAt sets the "updated_at" field.
func (sjc *ScheduledJobCreate) SetUpdatedAt(t time.Time) *ScheduledJobCreate {
	sjc.mutation.SetUpdatedAt(t)
	return sjc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableUpdatedAt(t *time.Time) *ScheduledJobCreate {
	if t != nil {
		sjc.SetUpdatedAt(*t)
	}
	return sjc
}

// SetCreatedBy sets the "created_by" field.
func (sjc *ScheduledJobCreate) SetCreatedBy(s string) *ScheduledJobCreate {
	sjc.mutation.SetCreatedBy(s)
	return sjc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableCreatedBy(s *string) *ScheduledJobCreate {
	if s != nil {
		sjc.SetCreatedBy(*s)
	}
	return sjc
}

// SetUpdatedBy sets the "updated_by" field.
func (sjc *ScheduledJobCreate) SetUpdatedBy(s string) *ScheduledJobCreate {
	sjc.mutation.SetUpdatedBy(s)
	return sjc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableUpdatedBy(s *string) *ScheduledJobCreate {
	if s != nil {
		sjc.SetUpdatedBy(*s)
	}
	return sjc
}

// SetEnvironmentID sets the "environment_id" field.
func (sjc *ScheduledJobCreate) SetEnvironmentID(s string) *ScheduledJobCreate {
	sjc.mutation.SetEnvironmentID(s)
	return sjc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableEnvironmentID(s *string) *ScheduledJobCreate {
	if s != nil {
		sjc.SetEnvironmentID(*s)
	}
	return sjc
}

// SetConnectionID sets the "connection_id" field.
func (sjc *ScheduledJobCreate) SetConnectionID(s string) *ScheduledJobCreate {
	sjc.mutation.SetConnectionID(s)
	return sjc
}

// SetEntityType sets the "entity_type" field.
func (sjc *ScheduledJobCreate) SetEntityType(s string) *ScheduledJobCreate {
	sjc.mutation.SetEntityType(s)
	return sjc
}

// SetInterval sets the "interval" field.
func (sjc *ScheduledJobCreate) SetInterval(s string) *ScheduledJobCreate {
	sjc.mutation.SetInterval(s)
	return sjc
}

// SetEnabled sets the "enabled" field.
func (sjc *ScheduledJobCreate) SetEnabled(b bool) *ScheduledJobCreate {
	sjc.mutation.SetEnabled(b)
	return sjc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableEnabled(b *bool) *ScheduledJobCreate {
	if b != nil {
		sjc.SetEnabled(*b)
	}
	return sjc
}

// SetJobConfig sets the "job_config" field.
func (sjc *ScheduledJobCreate) SetJobConfig(m map[string]interface{}) *ScheduledJobCreate {
	sjc.mutation.SetJobConfig(m)
	return sjc
}

// SetLastRunAt sets the "last_run_at" field.
func (sjc *ScheduledJobCreate) SetLastRunAt(t time.Time) *ScheduledJobCreate {
	sjc.mutation.SetLastRunAt(t)
	return sjc
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableLastRunAt(t *time.Time) *ScheduledJobCreate {
	if t != nil {
		sjc.SetLastRunAt(*t)
	}
	return sjc
}

// SetNextRunAt sets the "next_run_at" field.
func (sjc *ScheduledJobCreate) SetNextRunAt(t time.Time) *ScheduledJobCreate {
	sjc.mutation.SetNextRunAt(t)
	return sjc
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableNextRunAt(t *time.Time) *ScheduledJobCreate {
	if t != nil {
		sjc.SetNextRunAt(*t)
	}
	return sjc
}

// SetLastRunStatus sets the "last_run_status" field.
func (sjc *ScheduledJobCreate) SetLastRunStatus(s string) *ScheduledJobCreate {
	sjc.mutation.SetLastRunStatus(s)
	return sjc
}

// SetNillableLastRunStatus sets the "last_run_status" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableLastRunStatus(s *string) *ScheduledJobCreate {
	if s != nil {
		sjc.SetLastRunStatus(*s)
	}
	return sjc
}

// SetLastRunError sets the "last_run_error" field.
func (sjc *ScheduledJobCreate) SetLastRunError(s string) *ScheduledJobCreate {
	sjc.mutation.SetLastRunError(s)
	return sjc
}

// SetNillableLastRunError sets the "last_run_error" field if the given value is not nil.
func (sjc *ScheduledJobCreate) SetNillableLastRunError(s *string) *ScheduledJobCreate {
	if s != nil {
		sjc.SetLastRunError(*s)
	}
	return sjc
}

// SetID sets the "id" field.
func (sjc *ScheduledJobCreate) SetID(s string) *ScheduledJobCreate {
	sjc.mutation.SetID(s)
	return sjc
}

// SetConnection sets the "connection" edge to the Connection entity.
func (sjc *ScheduledJobCreate) SetConnection(c *Connection) *ScheduledJobCreate {
	return sjc.SetConnectionID(c.ID)
}

// Mutation returns the ScheduledJobMutation object of the builder.
func (sjc *ScheduledJobCreate) Mutation() *ScheduledJobMutation {
	return sjc.mutation
}

// Save creates the ScheduledJob in the database.
func (sjc *ScheduledJobCreate) Save(ctx context.Context) (*ScheduledJob, error) {
	sjc.defaults()
	return withHooks(ctx, sjc.sqlSave, sjc.mutation, sjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sjc *ScheduledJobCreate) SaveX(ctx context.Context) *ScheduledJob {
	v, err := sjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjc *ScheduledJobCreate) Exec(ctx context.Context) error {
	_, err := sjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjc *ScheduledJobCreate) ExecX(ctx context.Context) {
	if err := sjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjc *ScheduledJobCreate) defaults() {
	if _, ok := sjc.mutation.Status(); !ok {
		v := scheduledjob.DefaultStatus
		sjc.mutation.SetStatus(v)
	}
	if _, ok := sjc.mutation.CreatedAt(); !ok {
		v := scheduledjob.DefaultCreatedAt()
		sjc.mutation.SetCreatedAt(v)
	}
	if _, ok := sjc.mutation.UpdatedAt(); !ok {
		v := scheduledjob.DefaultUpdatedAt()
		sjc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sjc.mutation.EnvironmentID(); !ok {
		v := scheduledjob.DefaultEnvironmentID
		sjc.mutation.SetEnvironmentID(v)
	}
	if _, ok := sjc.mutation.Enabled(); !ok {
		v := scheduledjob.DefaultEnabled
		sjc.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjc *ScheduledJobCreate) check() error {
	if _, ok := sjc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ScheduledJob.tenant_id"`)}
	}
	if v, ok := sjc.mutation.TenantID(); ok {
		if err := scheduledjob.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.tenant_id": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ScheduledJob.status"`)}
	}
	if _, ok := sjc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScheduledJob.created_at"`)}
	}
	if _, ok := sjc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ScheduledJob.updated_at"`)}
	}
	if _, ok := sjc.mutation.ConnectionID(); !ok {
		return &ValidationError{Name: "connection_id", err: errors.New(`ent: missing required field "ScheduledJob.connection_id"`)}
	}
	if v, ok := sjc.mutation.ConnectionID(); ok {
		if err := scheduledjob.ConnectionIDValidator(v); err != nil {
			return &ValidationError{Name: "connection_id", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.connection_id": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "ScheduledJob.entity_type"`)}
	}
	if v, ok := sjc.mutation.EntityType(); ok {
		if err := scheduledjob.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.entity_type": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.Interval(); !ok {
		return &ValidationError{Name: "interval", err: errors.New(`ent: missing required field "ScheduledJob.interval"`)}
	}
	if v, ok := sjc.mutation.Interval(); ok {
		if err := scheduledjob.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ScheduledJob.interval": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "ScheduledJob.enabled"`)}
	}
	if len(sjc.mutation.ConnectionIDs()) == 0 {
		return &ValidationError{Name: "connection", err: errors.New(`ent: missing required edge "ScheduledJob.connection"`)}
	}
	return nil
}

func (sjc *ScheduledJobCreate) sqlSave(ctx context.Context) (*ScheduledJob, error) {
	if err := sjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ScheduledJob.ID type: %T", _spec.ID.Value)
		}
	}
	sjc.mutation.id = &_node.ID
	sjc.mutation.done = true
	return _node, nil
}

func (sjc *ScheduledJobCreate) createSpec() (*ScheduledJob, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheduledJob{config: sjc.config}
		_spec = sqlgraph.NewCreateSpec(scheduledjob.Table, sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString))
	)
	if id, ok := sjc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sjc.mutation.TenantID(); ok {
		_spec.SetField(scheduledjob.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := sjc.mutation.Status(); ok {
		_spec.SetField(scheduledjob.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sjc.mutation.CreatedAt(); ok {
		_spec.SetField(scheduledjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sjc.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sjc.mutation.CreatedBy(); ok {
		_spec.SetField(scheduledjob.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sjc.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sjc.mutation.EnvironmentID(); ok {
		_spec.SetField(scheduledjob.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := sjc.mutation.EntityType(); ok {
		_spec.SetField(scheduledjob.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := sjc.mutation.Interval(); ok {
		_spec.SetField(scheduledjob.FieldInterval, field.TypeString, value)
		_node.Interval = value
	}
	if value, ok := sjc.mutation.Enabled(); ok {
		_spec.SetField(scheduledjob.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := sjc.mutation.JobConfig(); ok {
		_spec.SetField(scheduledjob.FieldJobConfig, field.TypeJSON, value)
		_node.JobConfig = value
	}
	if value, ok := sjc.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledjob.FieldLastRunAt, field.TypeTime, value)
		_node.LastRunAt = &value
	}
	if value, ok := sjc.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledjob.FieldNextRunAt, field.TypeTime, value)
		_node.NextRunAt = &value
	}
	if value, ok := sjc.mutation.LastRunStatus(); ok {
		_spec.SetField(scheduledjob.FieldLastRunStatus, field.TypeString, value)
		_node.LastRunStatus = value
	}
	if value, ok := sjc.mutation.LastRunError(); ok {
		_spec.SetField(scheduledjob.FieldLastRunError, field.TypeString, value)
		_node.LastRunError = value
	}
	if nodes := sjc.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.ConnectionTable,
			Columns: []string{scheduledjob.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConnectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheduledJobCreateBulk is the builder for creating many ScheduledJob entities in bulk.
type ScheduledJobCreateBulk struct {
	config
	err      error
	builders []*ScheduledJobCreate
}

// Save creates the ScheduledJob entities in the database.
func (sjcb *ScheduledJobCreateBulk) Save(ctx context.Context) ([]*ScheduledJob, error) {
	if sjcb.err != nil {
		return nil, sjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sjcb.builders))
	nodes := make([]*ScheduledJob, len(sjcb.builders))
	mutators := make([]Mutator, len(sjcb.builders))
	for i := range sjcb.builders {
		func(i int, root context.Context) {
			builder := sjcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduledJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjcb *ScheduledJobCreateBulk) SaveX(ctx context.Context) []*ScheduledJob {
	v, err := sjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjcb *ScheduledJobCreateBulk) Exec(ctx context.Context) error {
	_, err := sjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjcb *ScheduledJobCreateBulk) ExecX(ctx context.Context) {
	if err := sjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
