// Code generated by ent, DO NOT EDIT.

package scheduledjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scheduledjob type in the database.
	Label = "scheduled_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldConnectionID holds the string denoting the connection_id field in the database.
	FieldConnectionID = "connection_id"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldJobConfig holds the string denoting the job_config field in the database.
	FieldJobConfig = "job_config"
	// FieldLastRunAt holds the string denoting the last_run_at field in the database.
	FieldLastRunAt = "last_run_at"
	// FieldNextRunAt holds the string denoting the next_run_at field in the database.
	FieldNextRunAt = "next_run_at"
	// FieldLastRunStatus holds the string denoting the last_run_status field in the database.
	FieldLastRunStatus = "last_run_status"
	// FieldLastRunError holds the string denoting the last_run_error field in the database.
	FieldLastRunError = "last_run_error"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// Table holds the table name of the scheduledjob in the database.
	Table = "scheduled_jobs"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "scheduled_jobs"
	// ConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionInverseTable = "connections"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "connection_id"
)

// Columns holds all SQL columns for scheduledjob fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldEnvironmentID,
	FieldConnectionID,
	FieldEntityType,
	FieldInterval,
	FieldEnabled,
	FieldJobConfig,
	FieldLastRunAt,
	FieldNextRunAt,
	FieldLastRunStatus,
	FieldLastRunError,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnvironmentID holds the default value on creation for the "environment_id" field.
	DefaultEnvironmentID string
	// ConnectionIDValidator is a validator for the "connection_id" field. It is called by the builders before save.
	ConnectionIDValidator func(string) error
	// EntityTypeValidator is a validator for the "entity_type" field. It is called by the builders before save.
	EntityTypeValidator func(string) error
	// IntervalValidator is a validator for the "interval" field. It is called by the builders before save.
	IntervalValidator func(string) error
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
)

// OrderOption defines the ordering options for the ScheduledJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByConnectionID orders the results by the connection_id field.
func ByConnectionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConnectionID, opts...).ToFunc()
}

// ByEntityType orders the results by the entity_type field.
func ByEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityType, opts...).ToFunc()
}

// ByInterval orders the results by the interval field.
func ByInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterval, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByLastRunAt orders the results by the last_run_at field.
func ByLastRunAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunAt, opts...).ToFunc()
}

// ByNextRunAt orders the results by the next_run_at field.
func ByNextRunAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRunAt, opts...).ToFunc()
}

// ByLastRunStatus orders the results by the last_run_status field.
func ByLastRunStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunStatus, opts...).ToFunc()
}

// ByLastRunError orders the results by the last_run_error field.
func ByLastRunError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunError, opts...).ToFunc()
}

// ByConnectionField orders the results by connection field.
func ByConnectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionStep(), sql.OrderByField(field, opts...))
	}
}
func newConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConnectionTable, ConnectionColumn),
	)
}
