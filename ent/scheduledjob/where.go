// Code generated by ent, DO NOT EDIT.

package scheduledjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldTenantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldUpdatedBy, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldEnvironmentID, v))
}

// ConnectionID applies equality check predicate on the "connection_id" field. It's identical to ConnectionIDEQ.
func ConnectionID(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldConnectionID, v))
}

// EntityType applies equality check predicate on the "entity_type" field. It's identical to EntityTypeEQ.
func EntityType(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldEntityType, v))
}

// Interval applies equality check predicate on the "interval" field. It's identical to IntervalEQ.
func Interval(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldInterval, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldEnabled, v))
}

// LastRunAt applies equality check predicate on the "last_run_at" field. It's identical to LastRunAtEQ.
func LastRunAt(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldLastRunAt, v))
}

// NextRunAt applies equality check predicate on the "next_run_at" field. It's identical to NextRunAtEQ.
func NextRunAt(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldNextRunAt, v))
}

// LastRunStatus applies equality check predicate on the "last_run_status" field. It's identical to LastRunStatusEQ.
func LastRunStatus(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldLastRunStatus, v))
}

// LastRunError applies equality check predicate on the "last_run_error" field. It's identical to LastRunErrorEQ.
func LastRunError(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldLastRunError, v))
}

// TemporalScheduleID applies equality check predicate on the "temporal_schedule_id" field. It's identical to TemporalScheduleIDEQ.
func TemporalScheduleID(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldTemporalScheduleID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldTenantID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldEnvironmentID, v))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldEnvironmentID, v))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldEnvironmentID, v))
}

// EnvironmentIDIsNil applies the IsNil predicate on the "environment_id" field.
func EnvironmentIDIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldEnvironmentID))
}

// EnvironmentIDNotNil applies the NotNil predicate on the "environment_id" field.
func EnvironmentIDNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldEnvironmentID))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldEnvironmentID, v))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldEnvironmentID, v))
}

// ConnectionIDEQ applies the EQ predicate on the "connection_id" field.
func ConnectionIDEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldConnectionID, v))
}

// ConnectionIDNEQ applies the NEQ predicate on the "connection_id" field.
func ConnectionIDNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldConnectionID, v))
}

// ConnectionIDIn applies the In predicate on the "connection_id" field.
func ConnectionIDIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldConnectionID, vs...))
}

// ConnectionIDNotIn applies the NotIn predicate on the "connection_id" field.
func ConnectionIDNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldConnectionID, vs...))
}

// ConnectionIDGT applies the GT predicate on the "connection_id" field.
func ConnectionIDGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldConnectionID, v))
}

// ConnectionIDGTE applies the GTE predicate on the "connection_id" field.
func ConnectionIDGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldConnectionID, v))
}

// ConnectionIDLT applies the LT predicate on the "connection_id" field.
func ConnectionIDLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldConnectionID, v))
}

// ConnectionIDLTE applies the LTE predicate on the "connection_id" field.
func ConnectionIDLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldConnectionID, v))
}

// ConnectionIDContains applies the Contains predicate on the "connection_id" field.
func ConnectionIDContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldConnectionID, v))
}

// ConnectionIDHasPrefix applies the HasPrefix predicate on the "connection_id" field.
func ConnectionIDHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldConnectionID, v))
}

// ConnectionIDHasSuffix applies the HasSuffix predicate on the "connection_id" field.
func ConnectionIDHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldConnectionID, v))
}

// ConnectionIDEqualFold applies the EqualFold predicate on the "connection_id" field.
func ConnectionIDEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldConnectionID, v))
}

// ConnectionIDContainsFold applies the ContainsFold predicate on the "connection_id" field.
func ConnectionIDContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldConnectionID, v))
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldEntityType, v))
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldEntityType, v))
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldEntityType, vs...))
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldEntityType, vs...))
}

// EntityTypeGT applies the GT predicate on the "entity_type" field.
func EntityTypeGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldEntityType, v))
}

// EntityTypeGTE applies the GTE predicate on the "entity_type" field.
func EntityTypeGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldEntityType, v))
}

// EntityTypeLT applies the LT predicate on the "entity_type" field.
func EntityTypeLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldEntityType, v))
}

// EntityTypeLTE applies the LTE predicate on the "entity_type" field.
func EntityTypeLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldEntityType, v))
}

// EntityTypeContains applies the Contains predicate on the "entity_type" field.
func EntityTypeContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldEntityType, v))
}

// EntityTypeHasPrefix applies the HasPrefix predicate on the "entity_type" field.
func EntityTypeHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldEntityType, v))
}

// EntityTypeHasSuffix applies the HasSuffix predicate on the "entity_type" field.
func EntityTypeHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldEntityType, v))
}

// EntityTypeEqualFold applies the EqualFold predicate on the "entity_type" field.
func EntityTypeEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldEntityType, v))
}

// EntityTypeContainsFold applies the ContainsFold predicate on the "entity_type" field.
func EntityTypeContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldEntityType, v))
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldInterval, v))
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldInterval, v))
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldInterval, vs...))
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldInterval, vs...))
}

// IntervalGT applies the GT predicate on the "interval" field.
func IntervalGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldInterval, v))
}

// IntervalGTE applies the GTE predicate on the "interval" field.
func IntervalGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldInterval, v))
}

// IntervalLT applies the LT predicate on the "interval" field.
func IntervalLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldInterval, v))
}

// IntervalLTE applies the LTE predicate on the "interval" field.
func IntervalLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldInterval, v))
}

// IntervalContains applies the Contains predicate on the "interval" field.
func IntervalContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldInterval, v))
}

// IntervalHasPrefix applies the HasPrefix predicate on the "interval" field.
func IntervalHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldInterval, v))
}

// IntervalHasSuffix applies the HasSuffix predicate on the "interval" field.
func IntervalHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldInterval, v))
}

// IntervalEqualFold applies the EqualFold predicate on the "interval" field.
func IntervalEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldInterval, v))
}

// IntervalContainsFold applies the ContainsFold predicate on the "interval" field.
func IntervalContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldInterval, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldEnabled, v))
}

// JobConfigIsNil applies the IsNil predicate on the "job_config" field.
func JobConfigIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldJobConfig))
}

// JobConfigNotNil applies the NotNil predicate on the "job_config" field.
func JobConfigNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldJobConfig))
}

// LastRunAtEQ applies the EQ predicate on the "last_run_at" field.
func LastRunAtEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldLastRunAt, v))
}

// LastRunAtNEQ applies the NEQ predicate on the "last_run_at" field.
func LastRunAtNEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldLastRunAt, v))
}

// LastRunAtIn applies the In predicate on the "last_run_at" field.
func LastRunAtIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldLastRunAt, vs...))
}

// LastRunAtNotIn applies the NotIn predicate on the "last_run_at" field.
func LastRunAtNotIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldLastRunAt, vs...))
}

// LastRunAtGT applies the GT predicate on the "last_run_at" field.
func LastRunAtGT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldLastRunAt, v))
}

// LastRunAtGTE applies the GTE predicate on the "last_run_at" field.
func LastRunAtGTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldLastRunAt, v))
}

// LastRunAtLT applies the LT predicate on the "last_run_at" field.
func LastRunAtLT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldLastRunAt, v))
}

// LastRunAtLTE applies the LTE predicate on the "last_run_at" field.
func LastRunAtLTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldLastRunAt, v))
}

// LastRunAtIsNil applies the IsNil predicate on the "last_run_at" field.
func LastRunAtIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldLastRunAt))
}

// LastRunAtNotNil applies the NotNil predicate on the "last_run_at" field.
func LastRunAtNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldLastRunAt))
}

// NextRunAtEQ applies the EQ predicate on the "next_run_at" field.
func NextRunAtEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldNextRunAt, v))
}

// NextRunAtNEQ applies the NEQ predicate on the "next_run_at" field.
func NextRunAtNEQ(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldNextRunAt, v))
}

// NextRunAtIn applies the In predicate on the "next_run_at" field.
func NextRunAtIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldNextRunAt, vs...))
}

// NextRunAtNotIn applies the NotIn predicate on the "next_run_at" field.
func NextRunAtNotIn(vs ...time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldNextRunAt, vs...))
}

// NextRunAtGT applies the GT predicate on the "next_run_at" field.
func NextRunAtGT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldNextRunAt, v))
}

// NextRunAtGTE applies the GTE predicate on the "next_run_at" field.
func NextRunAtGTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldNextRunAt, v))
}

// NextRunAtLT applies the LT predicate on the "next_run_at" field.
func NextRunAtLT(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldNextRunAt, v))
}

// NextRunAtLTE applies the LTE predicate on the "next_run_at" field.
func NextRunAtLTE(v time.Time) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldNextRunAt, v))
}

// NextRunAtIsNil applies the IsNil predicate on the "next_run_at" field.
func NextRunAtIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldNextRunAt))
}

// NextRunAtNotNil applies the NotNil predicate on the "next_run_at" field.
func NextRunAtNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldNextRunAt))
}

// LastRunStatusEQ applies the EQ predicate on the "last_run_status" field.
func LastRunStatusEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldLastRunStatus, v))
}

// LastRunStatusNEQ applies the NEQ predicate on the "last_run_status" field.
func LastRunStatusNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldLastRunStatus, v))
}

// LastRunStatusIn applies the In predicate on the "last_run_status" field.
func LastRunStatusIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldLastRunStatus, vs...))
}

// LastRunStatusNotIn applies the NotIn predicate on the "last_run_status" field.
func LastRunStatusNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldLastRunStatus, vs...))
}

// LastRunStatusGT applies the GT predicate on the "last_run_status" field.
func LastRunStatusGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldLastRunStatus, v))
}

// LastRunStatusGTE applies the GTE predicate on the "last_run_status" field.
func LastRunStatusGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldLastRunStatus, v))
}

// LastRunStatusLT applies the LT predicate on the "last_run_status" field.
func LastRunStatusLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldLastRunStatus, v))
}

// LastRunStatusLTE applies the LTE predicate on the "last_run_status" field.
func LastRunStatusLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldLastRunStatus, v))
}

// LastRunStatusContains applies the Contains predicate on the "last_run_status" field.
func LastRunStatusContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldLastRunStatus, v))
}

// LastRunStatusHasPrefix applies the HasPrefix predicate on the "last_run_status" field.
func LastRunStatusHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldLastRunStatus, v))
}

// LastRunStatusHasSuffix applies the HasSuffix predicate on the "last_run_status" field.
func LastRunStatusHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldLastRunStatus, v))
}

// LastRunStatusIsNil applies the IsNil predicate on the "last_run_status" field.
func LastRunStatusIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldLastRunStatus))
}

// LastRunStatusNotNil applies the NotNil predicate on the "last_run_status" field.
func LastRunStatusNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldLastRunStatus))
}

// LastRunStatusEqualFold applies the EqualFold predicate on the "last_run_status" field.
func LastRunStatusEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldLastRunStatus, v))
}

// LastRunStatusContainsFold applies the ContainsFold predicate on the "last_run_status" field.
func LastRunStatusContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldLastRunStatus, v))
}

// LastRunErrorEQ applies the EQ predicate on the "last_run_error" field.
func LastRunErrorEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldLastRunError, v))
}

// LastRunErrorNEQ applies the NEQ predicate on the "last_run_error" field.
func LastRunErrorNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldLastRunError, v))
}

// LastRunErrorIn applies the In predicate on the "last_run_error" field.
func LastRunErrorIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldLastRunError, vs...))
}

// LastRunErrorNotIn applies the NotIn predicate on the "last_run_error" field.
func LastRunErrorNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldLastRunError, vs...))
}

// LastRunErrorGT applies the GT predicate on the "last_run_error" field.
func LastRunErrorGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldLastRunError, v))
}

// LastRunErrorGTE applies the GTE predicate on the "last_run_error" field.
func LastRunErrorGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldLastRunError, v))
}

// LastRunErrorLT applies the LT predicate on the "last_run_error" field.
func LastRunErrorLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldLastRunError, v))
}

// LastRunErrorLTE applies the LTE predicate on the "last_run_error" field.
func LastRunErrorLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldLastRunError, v))
}

// LastRunErrorContains applies the Contains predicate on the "last_run_error" field.
func LastRunErrorContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldLastRunError, v))
}

// LastRunErrorHasPrefix applies the HasPrefix predicate on the "last_run_error" field.
func LastRunErrorHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldLastRunError, v))
}

// LastRunErrorHasSuffix applies the HasSuffix predicate on the "last_run_error" field.
func LastRunErrorHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldLastRunError, v))
}

// LastRunErrorIsNil applies the IsNil predicate on the "last_run_error" field.
func LastRunErrorIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldLastRunError))
}

// LastRunErrorNotNil applies the NotNil predicate on the "last_run_error" field.
func LastRunErrorNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldLastRunError))
}

// LastRunErrorEqualFold applies the EqualFold predicate on the "last_run_error" field.
func LastRunErrorEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldLastRunError, v))
}

// LastRunErrorContainsFold applies the ContainsFold predicate on the "last_run_error" field.
func LastRunErrorContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldLastRunError, v))
}

// TemporalScheduleIDEQ applies the EQ predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEQ(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDNEQ applies the NEQ predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDNEQ(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNEQ(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDIn applies the In predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIn(FieldTemporalScheduleID, vs...))
}

// TemporalScheduleIDNotIn applies the NotIn predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDNotIn(vs ...string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotIn(FieldTemporalScheduleID, vs...))
}

// TemporalScheduleIDGT applies the GT predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDGT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGT(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDGTE applies the GTE predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDGTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldGTE(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDLT applies the LT predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDLT(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLT(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDLTE applies the LTE predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDLTE(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldLTE(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDContains applies the Contains predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDContains(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContains(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDHasPrefix applies the HasPrefix predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDHasPrefix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasPrefix(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDHasSuffix applies the HasSuffix predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDHasSuffix(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldHasSuffix(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDIsNil applies the IsNil predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDIsNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldIsNull(FieldTemporalScheduleID))
}

// TemporalScheduleIDNotNil applies the NotNil predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDNotNil() predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldNotNull(FieldTemporalScheduleID))
}

// TemporalScheduleIDEqualFold applies the EqualFold predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDEqualFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldEqualFold(FieldTemporalScheduleID, v))
}

// TemporalScheduleIDContainsFold applies the ContainsFold predicate on the "temporal_schedule_id" field.
func TemporalScheduleIDContainsFold(v string) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.FieldContainsFold(FieldTemporalScheduleID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheduledJob) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheduledJob) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheduledJob) predicate.ScheduledJob {
	return predicate.ScheduledJob(sql.NotPredicates(p))
}
